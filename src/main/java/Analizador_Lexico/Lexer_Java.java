/* The following code was generated by JFlex 1.7.0 */

/* Archivo: Lexer_Java.flex - Versi√≥n Completa */
package src.main.java.Analizador_Lexico;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/jflex/Lexer_Java.flex</tt>
 */
public class Lexer_Java {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int COMMENT = 6;
  public static final int LINE_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
      0, 0, 1, 1, 2, 2, 3, 3, 4, 4
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\73\1\3\1\1\22\0\1\3\1\61\1\21" +
      "\2\0\1\61\1\65\1\22\1\71\1\71\1\57\1\56\1\71\1\16" +
      "\1\17\1\60\1\6\1\13\2\27\4\7\2\5\1\70\1\71\1\63" +
      "\1\62\1\64\1\71\1\72\1\11\1\12\1\11\1\20\1\15\1\20" +
      "\5\4\1\14\6\4\1\74\4\4\1\10\2\4\1\71\1\23\1\71" +
      "\1\61\1\55\1\0\1\30\1\25\1\34\1\45\1\35\1\26\1\50" +
      "\1\42\1\43\1\4\1\40\1\37\1\46\1\24\1\36\1\51\1\4" +
      "\1\33\1\31\1\32\1\44\1\52\1\53\1\47\1\41\1\54\1\71" +
      "\1\66\1\71\1\67\6\0\1\73\u1fa2\0\1\73\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 = "\5\0\1\1\2\2\1\3\2\4\1\5\1\6\1\7" +
      "\1\10\20\3\1\11\10\5\2\6\1\12\1\3\1\13" +
      "\2\14\2\4\1\5\1\6\1\10\1\1\20\13\1\11" +
      "\10\5\2\6\1\12\1\13\2\15\22\13\2\2\1\5" +
      "\1\6\20\2\1\11\11\5\2\6\1\12\2\16\24\2" +
      "\1\4\1\0\2\17\1\0\1\4\3\0\37\3\1\11" +
      "\6\3\1\20\1\21\1\5\1\3\1\4\1\13\2\17" +
      "\1\13\1\4\3\13\3\22\37\13\1\11\6\13\1\20" +
      "\1\21\1\5\40\2\1\11\6\2\1\21\1\5\1\17" +
      "\1\0\2\4\36\3\1\23\14\3\1\17\1\13\2\4" +
      "\36\13\1\23\13\13\36\2\1\23\13\2\1\3\1\24" +
      "\2\3\1\23\11\3\1\25\17\3\1\13\1\24\2\13" +
      "\1\23\11\13\1\25\17\13\1\2\1\24\2\2\1\23" +
      "\11\2\1\25\17\2\1\3\1\26\1\11\5\3\1\11" +
      "\12\3\1\13\1\26\1\11\5\13\1\11\12\13\1\2" +
      "\1\26\1\11\5\2\1\11\12\2\13\3\13\13\13\2" +
      "\7\3\7\13\7\2\4\3\4\13\4\2\2\3\2\13" +
      "\2\2\1\5";

  private static int[] zzUnpackAction() {
    int[] result = new int[657];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u0131" +
      "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u0131\0\u0131\0\u02dc" +
      "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4" +
      "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u01ab" +
      "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0131" +
      "\0\u0857\0\u0131\0\u0131\0\u0894\0\u08d1\0\u090e\0\u0131\0\u094b" +
      "\0\u0988\0\u09c5\0\u0a02\0\u08d1\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6" +
      "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde" +
      "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u08d1\0\u0e4c\0\u0e89" +
      "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u08d1\0\u0ff7\0\u08d1" +
      "\0\u08d1\0\u0131\0\u1034\0\u0131\0\u01ab\0\u02dc\0\u0319\0\u0356" +
      "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e" +
      "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u0894\0\u1071\0\u10ae" +
      "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296" +
      "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e" +
      "\0\u14bb\0\u14f8\0\u1071\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629" +
      "\0\u1666\0\u16a3\0\u16e0\0\u1071\0\u171d\0\u1071\0\u1071\0\u175a" +
      "\0\u0131\0\u01ab\0\u01e8\0\u0225\0\u02dc\0\u0319\0\u0356\0\u0393" +
      "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b" +
      "\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u0894\0\u0131\0\u1797\0\u17d4" +
      "\0\u0131\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f" +
      "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67" +
      "\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f" +
      "\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37" +
      "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f" +
      "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u0131\0\u0131\0\u2250\0\u228d" +
      "\0\u08d1\0\u22ca\0\u2307\0\u08d1\0\u2344\0\u2381\0\u23be\0\u23fb" +
      "\0\u2438\0\u2475\0\u24b2\0\u0131\0\u24ef\0\u252c\0\u2569\0\u25a6" +
      "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e" +
      "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976" +
      "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e" +
      "\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46" +
      "\0\u2d83\0\u2dc0\0\u08d1\0\u08d1\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4" +
      "\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c" +
      "\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284" +
      "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c" +
      "\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654" +
      "\0\u3691\0\u36ce\0\u370b\0\u3748\0\u1071\0\u3785\0\u37c2\0\u37ff" +
      "\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7" +
      "\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf" +
      "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7" +
      "\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f" +
      "\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187" +
      "\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f" +
      "\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557" +
      "\0\u4594\0\u45d1\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702\0\u473f" +
      "\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea\0\u4927" +
      "\0\u4964\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2\0\u4b0f" +
      "\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u4cba\0\u4cf7" +
      "\0\u4d34\0\u4d71\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2\0\u4edf" +
      "\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d\0\u508a\0\u50c7" +
      "\0\u5104\0\u5141\0\u517e\0\u51bb\0\u51f8\0\u5235\0\u5272\0\u52af" +
      "\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497" +
      "\0\u54d4\0\u5511\0\u554e\0\u558b\0\u55c8\0\u5605\0\u5642\0\u567f" +
      "\0\u56bc\0\u56f9\0\u5736\0\u5773\0\u57b0\0\u57ed\0\u01ab\0\u582a" +
      "\0\u5867\0\u01ab\0\u58a4\0\u58e1\0\u591e\0\u595b\0\u5998\0\u59d5" +
      "\0\u5a12\0\u5a4f\0\u5a8c\0\u01ab\0\u5ac9\0\u5b06\0\u5b43\0\u5b80" +
      "\0\u5bbd\0\u5bfa\0\u5c37\0\u5c74\0\u5cb1\0\u5cee\0\u5d2b\0\u5d68" +
      "\0\u5da5\0\u5de2\0\u5e1f\0\u5e5c\0\u08d1\0\u5e99\0\u5ed6\0\u08d1" +
      "\0\u5f13\0\u5f50\0\u5f8d\0\u5fca\0\u6007\0\u6044\0\u6081\0\u60be" +
      "\0\u60fb\0\u08d1\0\u6138\0\u6175\0\u61b2\0\u61ef\0\u622c\0\u6269" +
      "\0\u62a6\0\u62e3\0\u6320\0\u635d\0\u639a\0\u63d7\0\u6414\0\u6451" +
      "\0\u648e\0\u64cb\0\u1071\0\u6508\0\u6545\0\u1071\0\u6582\0\u65bf" +
      "\0\u65fc\0\u6639\0\u6676\0\u66b3\0\u66f0\0\u672d\0\u676a\0\u1071" +
      "\0\u67a7\0\u67e4\0\u6821\0\u685e\0\u689b\0\u68d8\0\u6915\0\u6952" +
      "\0\u698f\0\u69cc\0\u6a09\0\u6a46\0\u6a83\0\u6ac0\0\u6afd\0\u6b3a" +
      "\0\u01ab\0\u6b77\0\u6bb4\0\u6bf1\0\u6c2e\0\u6c6b\0\u6ca8\0\u3d3d" +
      "\0\u6ce5\0\u6d22\0\u6d5f\0\u6d9c\0\u6dd9\0\u6e16\0\u6e53\0\u6e90" +
      "\0\u6ecd\0\u6f0a\0\u6f47\0\u08d1\0\u6f84\0\u6fc1\0\u6ffe\0\u703b" +
      "\0\u7078\0\u70b5\0\u4870\0\u70f2\0\u712f\0\u716c\0\u71a9\0\u71e6" +
      "\0\u7223\0\u7260\0\u729d\0\u72da\0\u7317\0\u7354\0\u1071\0\u7391" +
      "\0\u73ce\0\u740b\0\u7448\0\u7485\0\u74c2\0\u5272\0\u74ff\0\u753c" +
      "\0\u7579\0\u75b6\0\u75f3\0\u7630\0\u766d\0\u76aa\0\u76e7\0\u7724" +
      "\0\u7761\0\u779e\0\u77db\0\u7818\0\u7855\0\u7892\0\u78cf\0\u790c" +
      "\0\u7949\0\u7986\0\u79c3\0\u7a00\0\u7a3d\0\u7a7a\0\u7ab7\0\u7af4" +
      "\0\u7b31\0\u7b6e\0\u7bab\0\u7be8\0\u7c25\0\u7c62\0\u7c9f\0\u7cdc" +
      "\0\u7d19\0\u7d56\0\u7d93\0\u7dd0\0\u7e0d\0\u7e4a\0\u7e87\0\u7ec4" +
      "\0\u7f01\0\u7f3e\0\u7f7b\0\u7fb8\0\u7ff5\0\u8032\0\u806f\0\u80ac" +
      "\0\u80e9\0\u8126\0\u8163\0\u81a0\0\u81dd\0\u821a\0\u8257\0\u8294" +
      "\0\u82d1\0\u830e\0\u834b\0\u8388\0\u83c5\0\u8402\0\u843f\0\u847c" +
      "\0\u84b9\0\u84f6\0\u8533\0\u8570\0\u85ad\0\u85ea\0\u8627\0\u8664" +
      "\0\u86a1\0\u86de\0\u871b\0\u8758\0\u8795\0\u87d2\0\u880f\0\u884c" +
      "\0\u01ab";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[657];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 = "\1\6\1\7\2\10\1\11\1\12\1\13\1\12\3\11" +
      "\1\12\2\11\1\14\1\15\1\11\1\16\1\17\1\6" +
      "\1\20\1\21\1\22\1\12\1\23\1\24\1\25\1\26" +
      "\1\27\1\30\1\11\1\31\3\11\1\32\1\11\1\33" +
      "\2\11\1\34\1\35\1\36\1\37\1\11\1\40\1\41" +
      "\1\42\1\43\2\42\1\44\1\45\1\46\1\47\1\50" +
      "\1\51\1\52\1\53\1\0\1\54\1\55\1\56\1\57" +
      "\2\55\1\60\1\61\1\60\3\55\1\60\2\55\1\62" +
      "\1\63\1\55\1\16\1\64\1\65\1\66\1\67\1\70" +
      "\1\60\1\71\1\72\1\73\1\74\1\75\1\76\1\55" +
      "\1\77\3\55\1\100\1\55\1\101\2\55\1\102\1\103" +
      "\1\104\1\105\1\55\1\106\1\107\1\110\1\111\2\110" +
      "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121" +
      "\2\55\1\122\1\123\1\124\1\122\1\125\1\12\1\13" +
      "\1\12\3\125\1\12\2\125\1\14\1\15\1\125\1\122" +
      "\1\17\1\65\1\126\1\127\1\130\1\12\1\131\1\132" +
      "\1\133\1\134\1\135\1\136\1\125\1\137\3\125\1\140" +
      "\1\125\1\141\2\125\1\142\1\143\1\144\1\145\1\125" +
      "\1\40\1\41\1\42\1\43\2\42\1\44\1\45\1\46" +
      "\1\47\1\50\1\51\1\52\1\53\1\122\1\146\1\147" +
      "\1\150\1\10\13\147\1\151\1\152\4\147\1\153\1\154" +
      "\1\155\1\147\1\156\1\157\1\160\1\161\1\162\1\163" +
      "\1\147\1\164\3\147\1\165\1\147\1\166\2\147\1\167" +
      "\1\170\1\171\1\172\1\147\1\173\1\174\1\175\1\176" +
      "\2\177\1\200\1\201\1\202\1\203\1\204\1\205\1\206" +
      "\1\207\2\147\1\10\1\210\1\211\1\10\1\212\1\213" +
      "\1\214\1\213\3\212\1\213\2\212\1\14\1\15\1\212" +
      "\3\10\1\215\1\216\1\217\1\213\1\220\1\221\1\222" +
      "\1\223\1\224\1\225\1\212\1\226\3\212\1\227\1\212" +
      "\1\230\2\212\1\231\1\232\1\233\1\234\1\212\1\40" +
      "\1\41\1\42\1\43\2\42\1\44\1\45\1\46\1\47" +
      "\1\50\1\51\1\52\1\53\1\0\1\235\77\0\1\10" +
      "\76\0\12\11\2\0\1\11\3\0\32\11\16\0\1\11" +
      "\5\0\3\12\3\0\1\12\1\236\1\237\1\0\1\240" +
      "\1\241\5\0\1\241\1\12\5\0\1\237\1\0\1\236" +
      "\5\0\1\241\34\0\1\242\2\243\1\244\1\0\1\245" +
      "\1\243\1\236\1\237\1\0\1\240\1\241\4\0\1\245" +
      "\1\241\1\243\5\0\1\237\1\0\1\236\5\0\1\241" +
      "\1\0\1\244\43\0\1\50\43\0\1\50\1\0\1\50" +
      "\15\0\3\240\3\0\1\240\3\0\1\246\7\0\1\240" +
      "\51\0\12\11\2\0\1\11\3\0\4\11\1\247\4\11" +
      "\1\250\6\11\1\251\11\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\7\11\1\252\2\11\1\253\2\11" +
      "\1\254\14\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\4\11\1\255\5\11\1\256\1\257\3\11\1\260" +
      "\12\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\1\11\1\261\3\11\1\262\24\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\6\11\1\263\6\11\1\264" +
      "\1\265\1\11\1\266\6\11\1\267\2\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\7\11\1\270\6\11" +
      "\1\271\13\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\11\11\1\272\20\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\4\11\1\273\5\11\1\274\1\275" +
      "\2\11\1\276\13\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\1\277\12\11\1\300\7\11\1\301\6\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\12\11" +
      "\1\302\17\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\1\303\1\11\1\40\17\11\1\304\7\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\11\11\1\305" +
      "\1\306\17\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\12\11\1\307\17\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\4\11\1\310\2\11\1\311\10\11" +
      "\1\312\11\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\12\11\1\313\17\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\16\11\1\314\13\11\16\0\1\11" +
      "\56\0\1\50\3\0\1\50\74\0\1\50\71\0\1\315" +
      "\1\316\1\0\1\50\74\0\1\50\1\42\73\0\1\50" +
      "\1\0\1\317\72\0\1\50\2\0\1\50\71\0\1\50" +
      "\3\0\1\50\76\0\1\50\10\0\12\11\2\0\1\11" +
      "\3\0\6\11\1\320\23\11\16\0\1\11\1\55\2\0" +
      "\16\55\1\0\1\55\1\0\51\55\2\0\1\57\72\0" +
      "\1\55\2\0\2\55\3\60\3\55\1\60\1\321\1\322" +
      "\1\55\1\323\1\324\1\0\1\55\1\0\2\55\1\324" +
      "\1\60\5\55\1\322\1\55\1\321\5\55\1\324\30\55" +
      "\2\0\2\55\1\325\2\326\1\327\1\55\1\330\1\326" +
      "\1\321\1\322\1\55\1\323\1\324\1\0\1\55\1\0" +
      "\1\55\1\330\1\324\1\326\5\55\1\322\1\55\1\321" +
      "\5\55\1\324\1\55\1\327\26\55\2\0\13\55\1\116" +
      "\2\55\1\0\1\55\1\0\36\55\1\116\1\55\1\116" +
      "\11\55\2\0\2\55\3\323\3\55\1\323\3\55\1\331" +
      "\1\55\1\0\1\55\1\0\3\55\1\323\45\55\6\0" +
      "\1\332\1\333\3\0\1\332\5\0\6\334\1\332\2\0" +
      "\2\334\41\0\1\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\335\4\55\1\336\6\55\1\337\31\55\2\0" +
      "\16\55\1\0\1\55\1\0\7\55\1\340\2\55\1\341" +
      "\2\55\1\342\34\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\343\5\55\1\344\1\345\3\55\1\346\32\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\55\1\347\3\55" +
      "\1\350\44\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\351\6\55\1\352\1\353\1\55\1\354\6\55\1\355" +
      "\22\55\2\0\16\55\1\0\1\55\1\0\7\55\1\356" +
      "\6\55\1\357\33\55\2\0\16\55\1\0\1\55\1\0" +
      "\11\55\1\360\40\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\361\5\55\1\362\1\363\2\55\1\364\33\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\365\12\55\1\366" +
      "\7\55\1\367\26\55\2\0\16\55\1\0\1\55\1\0" +
      "\12\55\1\370\37\55\2\0\16\55\1\0\1\55\1\0" +
      "\1\371\1\55\1\106\17\55\1\372\27\55\2\0\16\55" +
      "\1\0\1\55\1\0\11\55\1\373\1\374\37\55\2\0" +
      "\16\55\1\0\1\55\1\0\12\55\1\375\37\55\2\0" +
      "\16\55\1\0\1\55\1\0\4\55\1\376\2\55\1\377" +
      "\10\55\1\u0100\31\55\2\0\16\55\1\0\1\55\1\0" +
      "\12\55\1\u0101\37\55\2\0\16\55\1\0\1\55\1\0" +
      "\16\55\1\u0102\33\55\2\0\16\55\1\0\1\55\1\0" +
      "\32\55\1\116\3\55\1\116\13\55\2\0\16\55\1\0" +
      "\1\55\1\0\36\55\1\116\13\55\2\0\16\55\1\0" +
      "\1\55\1\0\33\55\1\u0103\1\u0104\1\55\1\116\13\55" +
      "\2\0\16\55\1\0\1\55\1\0\36\55\1\116\1\110" +
      "\12\55\2\0\16\55\1\0\1\55\1\0\36\55\1\116" +
      "\1\55\1\u0105\11\55\2\0\16\55\1\0\1\55\1\0" +
      "\36\55\1\116\2\55\1\116\10\55\2\0\16\55\1\0" +
      "\1\55\1\0\36\55\1\116\3\55\1\116\7\55\2\0" +
      "\16\55\1\0\1\55\1\0\44\55\1\116\4\55\2\0" +
      "\1\124\72\0\2\147\1\0\54\147\1\0\17\147\1\10" +
      "\54\147\1\0\17\147\1\0\13\147\1\204\40\147\1\0" +
      "\2\147\1\204\1\147\1\204\12\147\1\0\14\147\1\u0106" +
      "\37\147\1\0\17\147\1\0\25\147\1\u0107\4\147\1\u0108" +
      "\6\147\1\u0109\12\147\1\0\17\147\1\0\30\147\1\u010a" +
      "\2\147\1\u010b\2\147\1\u010c\15\147\1\0\17\147\1\0" +
      "\25\147\1\u010d\5\147\1\u010e\1\u010f\3\147\1\u0110\13\147" +
      "\1\0\17\147\1\0\22\147\1\u0111\3\147\1\u0112\25\147" +
      "\1\0\17\147\1\0\27\147\1\u0113\6\147\1\u0114\1\u0115" +
      "\1\147\1\u0116\6\147\1\u0117\3\147\1\0\17\147\1\0" +
      "\30\147\1\u0118\6\147\1\u0119\14\147\1\0\17\147\1\0" +
      "\32\147\1\u011a\21\147\1\0\17\147\1\0\25\147\1\u011b" +
      "\5\147\1\u011c\1\u011d\2\147\1\u011e\14\147\1\0\17\147" +
      "\1\0\21\147\1\u011f\12\147\1\u0120\7\147\1\u0121\7\147" +
      "\1\0\17\147\1\0\33\147\1\u0122\20\147\1\0\17\147" +
      "\1\0\21\147\1\u0123\1\147\1\173\17\147\1\u0124\10\147" +
      "\1\0\17\147\1\0\32\147\1\u0125\1\u0126\20\147\1\0" +
      "\17\147\1\0\33\147\1\u0127\20\147\1\0\17\147\1\0" +
      "\25\147\1\u0128\2\147\1\u0129\10\147\1\u012a\12\147\1\0" +
      "\17\147\1\0\33\147\1\u012b\20\147\1\0\17\147\1\0" +
      "\37\147\1\u012c\14\147\1\0\17\147\1\0\53\147\1\204" +
      "\1\0\2\147\1\204\12\147\60\0\1\211\1\0\1\50" +
      "\12\0\2\147\1\0\54\147\1\315\1\u012d\1\147\1\204" +
      "\14\147\1\0\54\147\1\0\2\147\1\204\14\147\1\0" +
      "\54\147\1\0\2\147\1\204\1\177\13\147\1\0\54\147" +
      "\1\0\2\147\1\204\1\147\1\u012e\12\147\1\0\54\147" +
      "\1\0\2\147\1\204\2\147\1\204\11\147\1\0\54\147" +
      "\1\0\2\147\1\204\3\147\1\204\10\147\1\0\54\147" +
      "\1\0\10\147\1\204\4\147\2\0\1\211\77\0\3\u012f" +
      "\3\0\1\u012f\2\0\1\u0130\10\0\1\u012f\26\0\1\u0130" +
      "\23\0\3\240\3\0\1\240\1\0\1\237\2\0\1\241" +
      "\5\0\1\241\1\240\5\0\1\237\7\0\1\241\34\0" +
      "\3\242\3\0\1\242\1\0\1\237\1\0\1\240\1\241" +
      "\5\0\1\241\1\242\5\0\1\237\7\0\1\241\34\0" +
      "\1\242\2\243\3\0\1\243\1\236\1\237\1\0\1\240" +
      "\1\241\5\0\1\241\1\243\5\0\1\237\1\0\1\236" +
      "\5\0\1\241\34\0\3\u0131\1\0\3\u0131\1\0\1\u0131" +
      "\2\0\1\u0131\4\0\4\u0131\3\0\2\u0131\7\0\1\u0131" +
      "\35\0\1\u0132\4\0\1\u0132\100\0\1\52\61\0\12\11" +
      "\2\0\1\11\3\0\6\11\1\u0133\23\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\27\11\1\40\2\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\13\11" +
      "\1\u0134\16\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\11\11\1\u0135\20\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\12\11\1\u0136\17\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\6\11\1\u0137\23\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\13\11" +
      "\1\u0138\16\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\7\11\1\40\22\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\12\11\1\u0139\17\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\1\u013a\31\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\5\11\1\u013b" +
      "\24\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\5\11\1\u013c\24\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\4\11\1\u013d\2\11\1\u013e\22\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\1\u013f\31\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\12\11" +
      "\1\u0140\17\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\25\11\1\u0141\4\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\17\11\1\u0142\12\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\4\11\1\u0143\10\11" +
      "\1\40\2\11\1\u0144\11\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\7\11\1\u0145\7\11\1\u0146\12\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\6\11" +
      "\1\u0147\23\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\5\11\1\u0148\1\u0149\23\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\1\u014a\31\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\4\11\1\u014b\25\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\4\11" +
      "\1\u014c\25\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\20\11\1\u014d\11\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\5\11\1\u0148\24\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\6\11\1\u014e\23\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\1\u014f" +
      "\31\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\5\11\1\u0150\1\u0151\23\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\25\11\1\u0152\4\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\2\11\1\u0153\27\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\20\11" +
      "\1\u0154\11\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\6\11\1\u0155\23\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\10\11\1\u0156\21\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\12\11\1\u0157\4\11" +
      "\1\u0158\12\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\1\11\1\u0159\30\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\13\11\1\u015a\3\11\1\u015b\12\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\17\11" +
      "\1\u015c\12\11\16\0\1\11\62\0\1\50\1\0\1\42" +
      "\14\0\12\11\2\0\1\11\3\0\7\11\1\u015d\22\11" +
      "\16\0\1\11\1\55\2\0\2\55\3\u015e\3\55\1\u015e" +
      "\2\55\1\u015f\2\55\1\0\1\55\1\0\3\55\1\u015e" +
      "\26\55\1\u015f\17\55\2\0\2\55\3\323\3\55\1\323" +
      "\1\55\1\322\2\55\1\324\1\0\1\55\1\0\2\55" +
      "\1\324\1\323\5\55\1\322\7\55\1\324\30\55\2\0" +
      "\2\55\3\325\3\55\1\325\1\55\1\322\1\55\1\323" +
      "\1\324\1\0\1\55\1\0\2\55\1\324\1\325\5\55" +
      "\1\322\7\55\1\324\30\55\2\0\2\55\1\325\2\326" +
      "\3\55\1\326\1\321\1\322\1\55\1\323\1\324\1\0" +
      "\1\55\1\0\2\55\1\324\1\326\5\55\1\322\1\55" +
      "\1\321\5\55\1\324\30\55\2\0\2\55\3\u0160\1\55" +
      "\3\u0160\1\55\1\u0160\2\55\1\u0160\1\0\1\55\1\0" +
      "\1\55\4\u0160\3\55\2\u0160\7\55\1\u0160\30\55\2\0" +
      "\3\55\1\u0161\4\55\1\u0161\5\55\1\0\1\55\1\0" +
      "\52\55\2\0\14\55\1\120\1\55\1\0\1\55\1\0" +
      "\51\55\6\0\2\333\3\0\1\333\13\0\1\333\53\0" +
      "\2\334\3\0\1\334\13\0\1\334\45\0\1\55\2\0" +
      "\16\55\1\0\1\55\1\0\6\55\1\u0162\43\55\2\0" +
      "\16\55\1\0\1\55\1\0\27\55\1\106\22\55\2\0" +
      "\16\55\1\0\1\55\1\0\13\55\1\u0163\36\55\2\0" +
      "\16\55\1\0\1\55\1\0\11\55\1\u0164\40\55\2\0" +
      "\16\55\1\0\1\55\1\0\12\55\1\u0165\37\55\2\0" +
      "\16\55\1\0\1\55\1\0\6\55\1\u0166\43\55\2\0" +
      "\16\55\1\0\1\55\1\0\13\55\1\u0167\36\55\2\0" +
      "\16\55\1\0\1\55\1\0\7\55\1\106\42\55\2\0" +
      "\16\55\1\0\1\55\1\0\12\55\1\u0168\37\55\2\0" +
      "\16\55\1\0\1\55\1\0\1\u0169\51\55\2\0\16\55" +
      "\1\0\1\55\1\0\5\55\1\u016a\44\55\2\0\16\55" +
      "\1\0\1\55\1\0\5\55\1\u016b\44\55\2\0\16\55" +
      "\1\0\1\55\1\0\4\55\1\u016c\2\55\1\u016d\42\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\u016e\51\55\2\0" +
      "\16\55\1\0\1\55\1\0\12\55\1\u016f\37\55\2\0" +
      "\16\55\1\0\1\55\1\0\25\55\1\u0170\24\55\2\0" +
      "\16\55\1\0\1\55\1\0\17\55\1\u0171\32\55\2\0" +
      "\16\55\1\0\1\55\1\0\4\55\1\u0172\10\55\1\106" +
      "\2\55\1\u0173\31\55\2\0\16\55\1\0\1\55\1\0" +
      "\7\55\1\u0174\7\55\1\u0175\32\55\2\0\16\55\1\0" +
      "\1\55\1\0\6\55\1\u0176\43\55\2\0\16\55\1\0" +
      "\1\55\1\0\5\55\1\u0177\1\u0178\43\55\2\0\16\55" +
      "\1\0\1\55\1\0\1\u0179\51\55\2\0\16\55\1\0" +
      "\1\55\1\0\4\55\1\u017a\45\55\2\0\16\55\1\0" +
      "\1\55\1\0\4\55\1\u017b\45\55\2\0\16\55\1\0" +
      "\1\55\1\0\20\55\1\u017c\31\55\2\0\16\55\1\0" +
      "\1\55\1\0\5\55\1\u0177\44\55\2\0\16\55\1\0" +
      "\1\55\1\0\6\55\1\u017d\43\55\2\0\16\55\1\0" +
      "\1\55\1\0\1\u017e\51\55\2\0\16\55\1\0\1\55" +
      "\1\0\5\55\1\u017f\1\u0180\43\55\2\0\16\55\1\0" +
      "\1\55\1\0\25\55\1\u0181\24\55\2\0\16\55\1\0" +
      "\1\55\1\0\2\55\1\u0182\47\55\2\0\16\55\1\0" +
      "\1\55\1\0\20\55\1\u0183\31\55\2\0\16\55\1\0" +
      "\1\55\1\0\6\55\1\u0184\43\55\2\0\16\55\1\0" +
      "\1\55\1\0\10\55\1\u0185\41\55\2\0\16\55\1\0" +
      "\1\55\1\0\12\55\1\u0186\4\55\1\u0187\32\55\2\0" +
      "\16\55\1\0\1\55\1\0\1\55\1\u0188\50\55\2\0" +
      "\16\55\1\0\1\55\1\0\13\55\1\u0189\3\55\1\u018a" +
      "\32\55\2\0\16\55\1\0\1\55\1\0\17\55\1\u018b" +
      "\32\55\2\0\16\55\1\0\1\55\1\0\36\55\1\116" +
      "\1\55\1\110\10\55\2\147\1\0\14\147\1\206\37\147" +
      "\1\0\17\147\1\0\27\147\1\u018c\24\147\1\0\17\147" +
      "\1\0\50\147\1\173\3\147\1\0\17\147\1\0\34\147" +
      "\1\u018d\17\147\1\0\17\147\1\0\32\147\1\u018e\21\147" +
      "\1\0\17\147\1\0\33\147\1\u018f\20\147\1\0\17\147" +
      "\1\0\27\147\1\u0190\24\147\1\0\17\147\1\0\34\147" +
      "\1\u0191\17\147\1\0\17\147\1\0\30\147\1\173\23\147" +
      "\1\0\17\147\1\0\33\147\1\u0192\20\147\1\0\17\147" +
      "\1\0\21\147\1\u0193\32\147\1\0\17\147\1\0\26\147" +
      "\1\u0194\25\147\1\0\17\147\1\0\26\147\1\u0195\25\147" +
      "\1\0\17\147\1\0\25\147\1\u0196\2\147\1\u0197\23\147" +
      "\1\0\17\147\1\0\21\147\1\u0198\32\147\1\0\17\147" +
      "\1\0\33\147\1\u0199\20\147\1\0\17\147\1\0\46\147" +
      "\1\u019a\5\147\1\0\17\147\1\0\40\147\1\u019b\13\147" +
      "\1\0\17\147\1\0\25\147\1\u019c\10\147\1\173\2\147" +
      "\1\u019d\12\147\1\0\17\147\1\0\30\147\1\u019e\7\147" +
      "\1\u019f\13\147\1\0\17\147\1\0\27\147\1\u01a0\24\147" +
      "\1\0\17\147\1\0\26\147\1\u01a1\1\u01a2\24\147\1\0" +
      "\17\147\1\0\21\147\1\u01a3\32\147\1\0\17\147\1\0" +
      "\25\147\1\u01a4\26\147\1\0\17\147\1\0\25\147\1\u01a5" +
      "\26\147\1\0\17\147\1\0\41\147\1\u01a6\12\147\1\0" +
      "\17\147\1\0\26\147\1\u01a1\25\147\1\0\17\147\1\0" +
      "\27\147\1\u01a7\24\147\1\0\17\147\1\0\21\147\1\u01a8" +
      "\32\147\1\0\17\147\1\0\26\147\1\u01a9\1\u01aa\24\147" +
      "\1\0\17\147\1\0\46\147\1\u01ab\5\147\1\0\17\147" +
      "\1\0\23\147\1\u01ac\30\147\1\0\17\147\1\0\41\147" +
      "\1\u01ad\12\147\1\0\17\147\1\0\27\147\1\u01ae\24\147" +
      "\1\0\17\147\1\0\31\147\1\u01af\22\147\1\0\17\147" +
      "\1\0\33\147\1\u01b0\4\147\1\u01b1\13\147\1\0\17\147" +
      "\1\0\22\147\1\u01b2\31\147\1\0\17\147\1\0\34\147" +
      "\1\u01b3\3\147\1\u01b4\13\147\1\0\17\147\1\0\40\147" +
      "\1\u01b5\13\147\1\0\17\147\1\0\54\147\1\0\2\147" +
      "\1\204\1\147\1\177\10\147\5\0\3\u012f\3\0\1\u012f" +
      "\4\0\1\241\5\0\1\241\1\u012f\15\0\1\241\34\0" +
      "\3\u012f\3\0\1\u012f\13\0\1\u012f\52\0\3\u0131\1\0" +
      "\3\u0131\1\236\1\u0131\2\0\1\u0131\4\0\4\u0131\3\0" +
      "\2\u0131\1\0\1\236\5\0\1\u0131\35\0\1\u0132\4\0" +
      "\1\u0132\1\236\22\0\1\236\41\0\12\11\2\0\1\11" +
      "\3\0\17\11\1\u01b6\12\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\13\11\1\u01b7\16\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\4\11\1\u01b8\25\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\13\11" +
      "\1\u01b9\16\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\11\11\1\u01ba\20\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\5\11\1\u01bb\24\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\4\11\1\u01bc\25\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\4\11" +
      "\1\u01bd\25\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\6\11\1\u01be\23\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\11\11\1\u01bf\20\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\6\11\1\u01c0\23\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\17\11" +
      "\1\u01c1\12\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\10\11\1\u01c2\21\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\7\11\1\u01bc\22\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\11\11\1\256\20\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\6\11" +
      "\1\u0149\23\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\1\u01c3\31\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\11\11\1\u01c4\20\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\12\11\1\u01c5\17\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\5\11\1\40" +
      "\24\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\20\11\1\u01c6\11\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\11\11\1\40\20\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\10\11\1\u01c7\21\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\5\11\1\u01c8" +
      "\1\u01c9\23\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\5\11\1\u0146\24\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\7\11\1\u01ba\22\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\22\11\1\40\7\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\11\11" +
      "\1\u01ca\20\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\24\11\1\u01ba\5\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\6\11\1\u01cb\23\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\11\11\1\u01cc\20\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\12\11" +
      "\1\u01bf\1\u01cd\16\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\4\11\1\u01ce\25\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\1\11\1\u01cf\30\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\12\11\1\40" +
      "\17\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\14\11\1\u01d0\15\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\6\11\1\u01d1\23\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\26\11\1\u01d2\3\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\13\11\1\u01c0" +
      "\16\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\4\11\1\u01d3\25\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\21\11\1\u01ba\10\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\13\11\1\u0148\16\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\17\11\1\302" +
      "\12\11\16\0\1\11\1\55\2\0\2\55\3\u015e\3\55" +
      "\1\u015e\4\55\1\324\1\0\1\55\1\0\2\55\1\324" +
      "\1\u015e\15\55\1\324\30\55\2\0\2\55\3\u015e\3\55" +
      "\1\u015e\5\55\1\0\1\55\1\0\3\55\1\u015e\46\55" +
      "\2\0\2\55\3\u0160\1\55\3\u0160\1\321\1\u0160\2\55" +
      "\1\u0160\1\0\1\55\1\0\1\55\4\u0160\3\55\2\u0160" +
      "\1\55\1\321\5\55\1\u0160\30\55\2\0\3\55\1\u0161" +
      "\4\55\1\u0161\1\321\4\55\1\0\1\55\1\0\13\55" +
      "\1\321\36\55\2\0\16\55\1\0\1\55\1\0\17\55" +
      "\1\u01d4\32\55\2\0\16\55\1\0\1\55\1\0\13\55" +
      "\1\u01d5\36\55\2\0\16\55\1\0\1\55\1\0\4\55" +
      "\1\u01d6\45\55\2\0\16\55\1\0\1\55\1\0\13\55" +
      "\1\u01d7\36\55\2\0\16\55\1\0\1\55\1\0\11\55" +
      "\1\u01d8\40\55\2\0\16\55\1\0\1\55\1\0\5\55" +
      "\1\u01d9\44\55\2\0\16\55\1\0\1\55\1\0\4\55" +
      "\1\u01da\45\55\2\0\16\55\1\0\1\55\1\0\4\55" +
      "\1\u01db\45\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\u01dc\43\55\2\0\16\55\1\0\1\55\1\0\11\55" +
      "\1\u01dd\40\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\u01de\43\55\2\0\16\55\1\0\1\55\1\0\17\55" +
      "\1\u01df\32\55\2\0\16\55\1\0\1\55\1\0\10\55" +
      "\1\u01e0\41\55\2\0\16\55\1\0\1\55\1\0\7\55" +
      "\1\u01da\42\55\2\0\16\55\1\0\1\55\1\0\11\55" +
      "\1\344\40\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\u0178\43\55\2\0\16\55\1\0\1\55\1\0\1\u01e1" +
      "\51\55\2\0\16\55\1\0\1\55\1\0\11\55\1\u01e2" +
      "\40\55\2\0\16\55\1\0\1\55\1\0\12\55\1\u01e3" +
      "\37\55\2\0\16\55\1\0\1\55\1\0\5\55\1\106" +
      "\44\55\2\0\16\55\1\0\1\55\1\0\20\55\1\u01e4" +
      "\31\55\2\0\16\55\1\0\1\55\1\0\11\55\1\106" +
      "\40\55\2\0\16\55\1\0\1\55\1\0\10\55\1\u01e5" +
      "\41\55\2\0\16\55\1\0\1\55\1\0\5\55\1\u01e6" +
      "\1\u01e7\43\55\2\0\16\55\1\0\1\55\1\0\5\55" +
      "\1\u0175\44\55\2\0\16\55\1\0\1\55\1\0\7\55" +
      "\1\u01d8\42\55\2\0\16\55\1\0\1\55\1\0\22\55" +
      "\1\106\27\55\2\0\16\55\1\0\1\55\1\0\11\55" +
      "\1\u01e8\40\55\2\0\16\55\1\0\1\55\1\0\24\55" +
      "\1\u01d8\25\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\u01e9\43\55\2\0\16\55\1\0\1\55\1\0\11\55" +
      "\1\u01ea\40\55\2\0\16\55\1\0\1\55\1\0\12\55" +
      "\1\u01dd\1\u01eb\36\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\u01ec\45\55\2\0\16\55\1\0\1\55\1\0" +
      "\1\55\1\u01ed\50\55\2\0\16\55\1\0\1\55\1\0" +
      "\12\55\1\106\37\55\2\0\16\55\1\0\1\55\1\0" +
      "\14\55\1\u01ee\35\55\2\0\16\55\1\0\1\55\1\0" +
      "\6\55\1\u01ef\43\55\2\0\16\55\1\0\1\55\1\0" +
      "\26\55\1\u01f0\23\55\2\0\16\55\1\0\1\55\1\0" +
      "\13\55\1\u01de\36\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\u01f1\45\55\2\0\16\55\1\0\1\55\1\0" +
      "\21\55\1\u01d8\30\55\2\0\16\55\1\0\1\55\1\0" +
      "\13\55\1\u0177\35\55\2\147\1\0\40\147\1\u01f2\13\147" +
      "\1\0\17\147\1\0\34\147\1\u01f3\17\147\1\0\17\147" +
      "\1\0\25\147\1\u01f4\26\147\1\0\17\147\1\0\34\147" +
      "\1\u01f5\17\147\1\0\17\147\1\0\32\147\1\u01f6\21\147" +
      "\1\0\17\147\1\0\26\147\1\u01f7\25\147\1\0\17\147" +
      "\1\0\25\147\1\u01f8\26\147\1\0\17\147\1\0\25\147" +
      "\1\u01f9\26\147\1\0\17\147\1\0\27\147\1\u01fa\24\147" +
      "\1\0\17\147\1\0\32\147\1\u01fb\21\147\1\0\17\147" +
      "\1\0\27\147\1\u01fc\24\147\1\0\17\147\1\0\40\147" +
      "\1\u01fd\13\147\1\0\17\147\1\0\31\147\1\u01fe\22\147" +
      "\1\0\17\147\1\0\30\147\1\u01f8\23\147\1\0\17\147" +
      "\1\0\32\147\1\u010e\21\147\1\0\17\147\1\0\27\147" +
      "\1\u01a2\24\147\1\0\17\147\1\0\21\147\1\u01ff\32\147" +
      "\1\0\17\147\1\0\32\147\1\u0200\21\147\1\0\17\147" +
      "\1\0\33\147\1\u0201\20\147\1\0\17\147\1\0\26\147" +
      "\1\173\25\147\1\0\17\147\1\0\41\147\1\u0202\12\147" +
      "\1\0\17\147\1\0\32\147\1\173\21\147\1\0\17\147" +
      "\1\0\31\147\1\u0203\22\147\1\0\17\147\1\0\26\147" +
      "\1\u0204\1\u0205\24\147\1\0\17\147\1\0\26\147\1\u019f" +
      "\25\147\1\0\17\147\1\0\30\147\1\u01f6\23\147\1\0" +
      "\17\147\1\0\43\147\1\173\10\147\1\0\17\147\1\0" +
      "\32\147\1\u0206\21\147\1\0\17\147\1\0\45\147\1\u01f6" +
      "\6\147\1\0\17\147\1\0\27\147\1\u0207\24\147\1\0" +
      "\17\147\1\0\32\147\1\u0208\21\147\1\0\17\147\1\0" +
      "\33\147\1\u01fb\1\u0209\17\147\1\0\17\147\1\0\25\147" +
      "\1\u020a\26\147\1\0\17\147\1\0\22\147\1\u020b\31\147" +
      "\1\0\17\147\1\0\33\147\1\173\20\147\1\0\17\147" +
      "\1\0\35\147\1\u020c\16\147\1\0\17\147\1\0\27\147" +
      "\1\u020d\24\147\1\0\17\147\1\0\47\147\1\u020e\4\147" +
      "\1\0\17\147\1\0\34\147\1\u01fc\17\147\1\0\17\147" +
      "\1\0\25\147\1\u020f\26\147\1\0\17\147\1\0\42\147" +
      "\1\u01f6\11\147\1\0\17\147\1\0\34\147\1\u01a1\17\147" +
      "\1\0\15\147\4\0\12\11\2\0\1\11\3\0\26\11" +
      "\1\u0148\3\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\14\11\1\40\15\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\11\11\1\u0210\20\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\11\11\1\u0211\20\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\6\11" +
      "\1\u01ba\23\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\13\11\1\u0212\16\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\7\11\1\u0213\22\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\7\11\1\u01c8\22\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\17\11" +
      "\1\u0214\12\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\10\11\1\u0215\21\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\16\11\1\u0216\13\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\5\11\1\u0217\24\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\27\11" +
      "\1\u0218\2\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\7\11\1\u0219\22\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\16\11\1\40\13\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\6\11\1\40\23\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\17\11" +
      "\1\u021a\12\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\1\u021b\31\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\4\11\1\u021c\25\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\7\11\1\u021d\22\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\11\11\1\u021e" +
      "\20\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\20\11\1\u021f\11\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\13\11\1\u0137\16\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\4\11\1\u0220\25\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\11\11\1\u0221" +
      "\20\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\4\11\1\u0222\25\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\6\11\1\314\23\11\16\0\1\11\1\55" +
      "\2\0\16\55\1\0\1\55\1\0\26\55\1\u0177\23\55" +
      "\2\0\16\55\1\0\1\55\1\0\14\55\1\106\35\55" +
      "\2\0\16\55\1\0\1\55\1\0\11\55\1\u0223\40\55" +
      "\2\0\16\55\1\0\1\55\1\0\11\55\1\u0224\40\55" +
      "\2\0\16\55\1\0\1\55\1\0\6\55\1\u01d8\43\55" +
      "\2\0\16\55\1\0\1\55\1\0\13\55\1\u0225\36\55" +
      "\2\0\16\55\1\0\1\55\1\0\7\55\1\u0226\42\55" +
      "\2\0\16\55\1\0\1\55\1\0\7\55\1\u01e6\42\55" +
      "\2\0\16\55\1\0\1\55\1\0\17\55\1\u0227\32\55" +
      "\2\0\16\55\1\0\1\55\1\0\10\55\1\u0228\41\55" +
      "\2\0\16\55\1\0\1\55\1\0\16\55\1\u0229\33\55" +
      "\2\0\16\55\1\0\1\55\1\0\5\55\1\u022a\44\55" +
      "\2\0\16\55\1\0\1\55\1\0\27\55\1\u022b\22\55" +
      "\2\0\16\55\1\0\1\55\1\0\7\55\1\u022c\42\55" +
      "\2\0\16\55\1\0\1\55\1\0\16\55\1\106\33\55" +
      "\2\0\16\55\1\0\1\55\1\0\6\55\1\106\43\55" +
      "\2\0\16\55\1\0\1\55\1\0\17\55\1\u022d\32\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\u022e\51\55\2\0" +
      "\16\55\1\0\1\55\1\0\4\55\1\u022f\45\55\2\0" +
      "\16\55\1\0\1\55\1\0\7\55\1\u0230\42\55\2\0" +
      "\16\55\1\0\1\55\1\0\11\55\1\u0231\40\55\2\0" +
      "\16\55\1\0\1\55\1\0\20\55\1\u0232\31\55\2\0" +
      "\16\55\1\0\1\55\1\0\13\55\1\u0166\36\55\2\0" +
      "\16\55\1\0\1\55\1\0\4\55\1\u0233\45\55\2\0" +
      "\16\55\1\0\1\55\1\0\11\55\1\u0234\40\55\2\0" +
      "\16\55\1\0\1\55\1\0\4\55\1\u0235\45\55\2\0" +
      "\16\55\1\0\1\55\1\0\6\55\1\u0102\42\55\2\147" +
      "\1\0\47\147\1\u01a1\4\147\1\0\17\147\1\0\35\147" +
      "\1\173\16\147\1\0\17\147\1\0\32\147\1\u0236\21\147" +
      "\1\0\17\147\1\0\32\147\1\u0237\21\147\1\0\17\147" +
      "\1\0\27\147\1\u01f6\24\147\1\0\17\147\1\0\34\147" +
      "\1\u0238\17\147\1\0\17\147\1\0\30\147\1\u0239\23\147" +
      "\1\0\17\147\1\0\30\147\1\u0204\23\147\1\0\17\147" +
      "\1\0\40\147\1\u023a\13\147\1\0\17\147\1\0\31\147" +
      "\1\u023b\22\147\1\0\17\147\1\0\37\147\1\u023c\14\147" +
      "\1\0\17\147\1\0\26\147\1\u023d\25\147\1\0\17\147" +
      "\1\0\50\147\1\u023e\3\147\1\0\17\147\1\0\30\147" +
      "\1\u023f\23\147\1\0\17\147\1\0\37\147\1\173\14\147" +
      "\1\0\17\147\1\0\27\147\1\173\24\147\1\0\17\147" +
      "\1\0\40\147\1\u0240\13\147\1\0\17\147\1\0\21\147" +
      "\1\u0241\32\147\1\0\17\147\1\0\25\147\1\u0242\26\147" +
      "\1\0\17\147\1\0\30\147\1\u0243\23\147\1\0\17\147" +
      "\1\0\32\147\1\u0244\21\147\1\0\17\147\1\0\41\147" +
      "\1\u0245\12\147\1\0\17\147\1\0\34\147\1\u0190\17\147" +
      "\1\0\17\147\1\0\25\147\1\u0246\26\147\1\0\17\147" +
      "\1\0\32\147\1\u0247\21\147\1\0\17\147\1\0\25\147" +
      "\1\u0248\26\147\1\0\17\147\1\0\27\147\1\u012c\24\147" +
      "\1\0\15\147\4\0\12\11\2\0\1\11\3\0\4\11" +
      "\1\u0249\25\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\13\11\1\u024a\16\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\4\11\1\u024b\25\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\10\11\1\40\21\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\6\11" +
      "\1\u024c\23\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\7\11\1\u024d\22\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\17\11\1\u024e\12\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\1\40\31\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\1\u024f\31\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\21\11" +
      "\1\u0146\10\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\1\u0250\31\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\2\11\1\u0251\27\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\22\11\1\u0252\7\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\13\11\1\u01c8" +
      "\16\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\24\11\1\u0148\5\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\10\11\1\u0253\21\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\6\11\1\u0148\23\11\16\0" +
      "\1\11\1\55\2\0\16\55\1\0\1\55\1\0\4\55" +
      "\1\u0254\45\55\2\0\16\55\1\0\1\55\1\0\13\55" +
      "\1\u0255\36\55\2\0\16\55\1\0\1\55\1\0\4\55" +
      "\1\u0256\45\55\2\0\16\55\1\0\1\55\1\0\10\55" +
      "\1\106\41\55\2\0\16\55\1\0\1\55\1\0\6\55" +
      "\1\u0257\43\55\2\0\16\55\1\0\1\55\1\0\7\55" +
      "\1\u0258\42\55\2\0\16\55\1\0\1\55\1\0\17\55" +
      "\1\u0259\32\55\2\0\16\55\1\0\1\55\1\0\1\106" +
      "\51\55\2\0\16\55\1\0\1\55\1\0\1\u025a\51\55" +
      "\2\0\16\55\1\0\1\55\1\0\21\55\1\u0175\30\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\u025b\51\55\2\0" +
      "\16\55\1\0\1\55\1\0\2\55\1\u025c\47\55\2\0" +
      "\16\55\1\0\1\55\1\0\22\55\1\u025d\27\55\2\0" +
      "\16\55\1\0\1\55\1\0\13\55\1\u01e6\36\55\2\0" +
      "\16\55\1\0\1\55\1\0\24\55\1\u0177\25\55\2\0" +
      "\16\55\1\0\1\55\1\0\10\55\1\u025e\41\55\2\0" +
      "\16\55\1\0\1\55\1\0\6\55\1\u0177\42\55\2\147" +
      "\1\0\25\147\1\u025f\26\147\1\0\17\147\1\0\34\147" +
      "\1\u0260\17\147\1\0\17\147\1\0\25\147\1\u0261\26\147" +
      "\1\0\17\147\1\0\31\147\1\173\22\147\1\0\17\147" +
      "\1\0\27\147\1\u0262\24\147\1\0\17\147\1\0\30\147" +
      "\1\u0263\23\147\1\0\17\147\1\0\40\147\1\u0264\13\147" +
      "\1\0\17\147\1\0\21\147\1\173\32\147\1\0\17\147" +
      "\1\0\21\147\1\u0265\32\147\1\0\17\147\1\0\42\147" +
      "\1\u019f\11\147\1\0\17\147\1\0\21\147\1\u0266\32\147" +
      "\1\0\17\147\1\0\23\147\1\u0267\30\147\1\0\17\147" +
      "\1\0\43\147\1\u0268\10\147\1\0\17\147\1\0\34\147" +
      "\1\u0204\17\147\1\0\17\147\1\0\45\147\1\u01a1\6\147" +
      "\1\0\17\147\1\0\31\147\1\u0269\22\147\1\0\17\147" +
      "\1\0\27\147\1\u01a1\24\147\1\0\15\147\4\0\12\11" +
      "\2\0\1\11\3\0\1\u01ba\31\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\15\11\1\40\14\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\10\11\1\u01c8" +
      "\21\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\2\11\1\u026a\27\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\12\11\1\u026b\17\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\11\11\1\u026c\20\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\20\11\1\u0148" +
      "\11\11\16\0\1\11\4\0\12\11\2\0\1\11\3\0" +
      "\10\11\1\u026d\21\11\16\0\1\11\4\0\12\11\2\0" +
      "\1\11\3\0\4\11\1\u026e\25\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\11\11\1\u026f\20\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\6\11\1\u0270" +
      "\23\11\16\0\1\11\1\55\2\0\16\55\1\0\1\55" +
      "\1\0\1\u01d8\51\55\2\0\16\55\1\0\1\55\1\0" +
      "\15\55\1\106\34\55\2\0\16\55\1\0\1\55\1\0" +
      "\10\55\1\u01e6\41\55\2\0\16\55\1\0\1\55\1\0" +
      "\2\55\1\u0271\47\55\2\0\16\55\1\0\1\55\1\0" +
      "\12\55\1\u0272\37\55\2\0\16\55\1\0\1\55\1\0" +
      "\11\55\1\u0273\40\55\2\0\16\55\1\0\1\55\1\0" +
      "\20\55\1\u0177\31\55\2\0\16\55\1\0\1\55\1\0" +
      "\10\55\1\u0274\41\55\2\0\16\55\1\0\1\55\1\0" +
      "\4\55\1\u0275\45\55\2\0\16\55\1\0\1\55\1\0" +
      "\11\55\1\u0276\40\55\2\0\16\55\1\0\1\55\1\0" +
      "\6\55\1\u0277\42\55\2\147\1\0\21\147\1\u01f6\32\147" +
      "\1\0\17\147\1\0\36\147\1\173\15\147\1\0\17\147" +
      "\1\0\31\147\1\u0204\22\147\1\0\17\147\1\0\23\147" +
      "\1\u0278\30\147\1\0\17\147\1\0\33\147\1\u0279\20\147" +
      "\1\0\17\147\1\0\32\147\1\u027a\21\147\1\0\17\147" +
      "\1\0\41\147\1\u01a1\12\147\1\0\17\147\1\0\31\147" +
      "\1\u027b\22\147\1\0\17\147\1\0\25\147\1\u027c\26\147" +
      "\1\0\17\147\1\0\32\147\1\u027d\21\147\1\0\17\147" +
      "\1\0\27\147\1\u027e\24\147\1\0\15\147\4\0\12\11" +
      "\2\0\1\11\3\0\25\11\1\40\4\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\1\u027f\31\11\16\0" +
      "\1\11\4\0\12\11\2\0\1\11\3\0\1\u01c8\31\11" +
      "\16\0\1\11\4\0\12\11\2\0\1\11\3\0\11\11" +
      "\1\u0280\20\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\10\11\1\u0148\21\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\1\u0281\31\11\16\0\1\11\4\0" +
      "\12\11\2\0\1\11\3\0\11\11\1\u0282\20\11\16\0" +
      "\1\11\1\55\2\0\16\55\1\0\1\55\1\0\25\55" +
      "\1\106\24\55\2\0\16\55\1\0\1\55\1\0\1\u0283" +
      "\51\55\2\0\16\55\1\0\1\55\1\0\1\u01e6\51\55" +
      "\2\0\16\55\1\0\1\55\1\0\11\55\1\u0284\40\55" +
      "\2\0\16\55\1\0\1\55\1\0\10\55\1\u0177\41\55" +
      "\2\0\16\55\1\0\1\55\1\0\1\u0285\51\55\2\0" +
      "\16\55\1\0\1\55\1\0\11\55\1\u0286\37\55\2\147" +
      "\1\0\46\147\1\173\5\147\1\0\17\147\1\0\21\147" +
      "\1\u0287\32\147\1\0\17\147\1\0\21\147\1\u0204\32\147" +
      "\1\0\17\147\1\0\32\147\1\u0288\21\147\1\0\17\147" +
      "\1\0\31\147\1\u01a1\22\147\1\0\17\147\1\0\21\147" +
      "\1\u0289\32\147\1\0\17\147\1\0\32\147\1\u028a\21\147" +
      "\1\0\15\147\4\0\12\11\2\0\1\11\3\0\17\11" +
      "\1\u028b\12\11\16\0\1\11\4\0\12\11\2\0\1\11" +
      "\3\0\12\11\1\u028c\17\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\6\11\1\u0146\23\11\16\0\1\11" +
      "\4\0\12\11\2\0\1\11\3\0\21\11\1\40\10\11" +
      "\16\0\1\11\1\55\2\0\16\55\1\0\1\55\1\0" +
      "\17\55\1\u028d\32\55\2\0\16\55\1\0\1\55\1\0" +
      "\12\55\1\u028e\37\55\2\0\16\55\1\0\1\55\1\0" +
      "\6\55\1\u0175\43\55\2\0\16\55\1\0\1\55\1\0" +
      "\21\55\1\106\27\55\2\147\1\0\40\147\1\u028f\13\147" +
      "\1\0\17\147\1\0\33\147\1\u0290\20\147\1\0\17\147" +
      "\1\0\27\147\1\u019f\24\147\1\0\17\147\1\0\42\147" +
      "\1\173\11\147\1\0\15\147\4\0\12\11\2\0\1\11" +
      "\3\0\30\11\1\u0270\1\11\16\0\1\11\4\0\12\11" +
      "\2\0\1\11\3\0\2\11\1\u0291\27\11\16\0\1\11" +
      "\1\55\2\0\16\55\1\0\1\55\1\0\30\55\1\u0277" +
      "\21\55\2\0\16\55\1\0\1\55\1\0\2\55\1\116" +
      "\46\55\2\147\1\0\51\147\1\u027e\2\147\1\0\17\147" +
      "\1\0\23\147\1\204\30\147\1\0\15\147";

  private static int[] zzUnpackTrans() {
    int[] result = new int[34953];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
      "Unknown internal scanner error",
      "Error: could not match input",
      "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 = "\5\0\1\11\1\1\1\11\5\1\2\11\30\1\1\11" +
      "\1\1\2\11\3\1\1\11\42\1\1\11\1\1\1\11" +
      "\64\1\1\11\24\1\1\11\1\0\1\1\1\11\1\0" +
      "\1\1\3\0\46\1\2\11\15\1\1\11\123\1\1\0" +
      "\u0161\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[657];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0; /* index in packed string */
    int j = offset; /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do
        result[j++] = value;
      while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // C√≥digo que se incluir√° en la clase generada
  private StringBuffer string = new StringBuffer();

  // M√©todo para crear tokens
  private Token token(String tipo) {
    return new Token(tipo, yytext(), yyline + 1, yycolumn + 1);
  }

  private Token token(String tipo, Object valor) {
    return new Token(tipo, valor, yyline + 1, yycolumn + 1);
  }

  /**
   * Creates a new scanner
   *
   * @param in the java.io.Reader to read input from.
   */
  public Lexer_Java(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x110000];
    int i = 0; /* index in packed string */
    int j = 0; /* index in unpacked array */
    while (i < 210) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do
        map[j++] = value;
      while (--count > 0);
    }
    return map;
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * 
   * @exception java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
          zzBuffer, 0,
          zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /*
       * If numRead == requested, we might have requested to few chars to
       * encode a full Unicode character. We assume that a Reader would
       * otherwise never return half characters.
       */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; /* indicate end of file */
    zzEndRead = zzStartRead; /* invalidate buffer */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL = true;
    zzAtEOF = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
  }

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead + pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength())
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B': // fall through
          case '\u000C': // fall through
          case '\u0085': // fall through
          case '\u2028': // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek)
          yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = zzState;
      }

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1)
            break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8)
              break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return token("ERROR", "Car√°cter ilegal <" + yytext() + ">");
          }
          // fall through
          case 23:
            break;
          case 2: { /* ignorar */
          }
          // fall through
          case 24:
            break;
          case 3: {
            return token("IDENTIFICADOR");
          }
          // fall through
          case 25:
            break;
          case 4: {
            if (yytext().endsWith("l") || yytext().endsWith("L")) {
              // Es un entero largo
              String valor = yytext().substring(0, yytext().length() - 1);
              if (yytext().startsWith("0x") || yytext().startsWith("0X")) {
                // Hexadecimal
                return token("ENTERO_LONG", Long.parseLong(valor.substring(2), 16));
              } else if (yytext().startsWith("0b") || yytext().startsWith("0B")) {
                // Binario
                return token("ENTERO_LONG", Long.parseLong(valor.substring(2), 2));
              } else if (valor.length() > 1 && valor.startsWith("0")) {
                // Octal
                return token("ENTERO_LONG", Long.parseLong(valor, 8));
              } else {
                // Decimal
                return token("ENTERO_LONG", Long.parseLong(valor));
              }
            } else {
              // Es un entero normal
              if (yytext().startsWith("0x") || yytext().startsWith("0X")) {
                // Hexadecimal
                return token("ENTERO_HEX", Integer.parseInt(yytext().substring(2), 16));
              } else if (yytext().startsWith("0b") || yytext().startsWith("0B")) {
                // Binario
                return token("ENTERO_BIN", Integer.parseInt(yytext().substring(2), 2));
              } else if (yytext().length() > 1 && yytext().startsWith("0")) {
                // Octal
                return token("ENTERO_OCT", Integer.parseInt(yytext(), 8));
              } else {
                // Decimal
                return token("ENTERO", Integer.parseInt(yytext()));
              }
            }
          }
          // fall through
          case 26:
            break;
          case 5: {
            return token("OPERADOR");
          }
          // fall through
          case 27:
            break;
          case 6: {
            return token("DELIMITADOR");
          }
          // fall through
          case 28:
            break;
          case 7: {
            string.setLength(0);
            yybegin(STRING);
          }
          // fall through
          case 29:
            break;
          case 8: {
            string.setLength(0);
            yybegin(CHAR);
          }
          // fall through
          case 30:
            break;
          case 9: {
            return token("PALABRA_CLAVE");
          }
          // fall through
          case 31:
            break;
          case 10: {
            return token("ANOTACION");
          }
          // fall through
          case 32:
            break;
          case 11: {
            string.append(yytext());
          }
          // fall through
          case 33:
            break;
          case 12: {
            throw new RuntimeException("Cadena sin cerrar");
          }
          // fall through
          case 34:
            break;
          case 13: {
            throw new RuntimeException("Car√°cter sin cerrar");
          }
          // fall through
          case 35:
            break;
          case 14: {
            yybegin(YYINITIAL);
          }
          // fall through
          case 36:
            break;
          case 15: {
            if (yytext().endsWith("f") || yytext().endsWith("F")) {
              // Es un float
              String valor = yytext().substring(0, yytext().length() - 1);
              return token("FLOTANTE", Float.parseFloat(valor));
            } else if (yytext().endsWith("d") || yytext().endsWith("D")) {
              // Es un double expl√≠cito
              String valor = yytext().substring(0, yytext().length() - 1);
              return token("DOUBLE", Double.parseDouble(valor));
            } else {
              // Es un double por defecto
              return token("DOUBLE", Double.parseDouble(yytext()));
            }
          }
          // fall through
          case 37:
            break;
          case 16: {
            yybegin(COMMENT);
          }
          // fall through
          case 38:
            break;
          case 17: {
            yybegin(LINE_COMMENT);
          }
          // fall through
          case 39:
            break;
          case 18: {
            char c = yytext().charAt(1);
            switch (c) {
              case 'b':
                string.append('\b');
                break;
              case 't':
                string.append('\t');
                break;
              case 'n':
                string.append('\n');
                break;
              case 'f':
                string.append('\f');
                break;
              case 'r':
                string.append('\r');
                break;
              case '\"':
                string.append('\"');
                break;
              case '\'':
                string.append('\'');
                break;
              case '\\':
                string.append('\\');
                break;
              default:
                string.append(c);
            }
          }
          // fall through
          case 40:
            break;
          case 19: {
            return token("TIPO");
          }
          // fall through
          case 41:
            break;
          case 20: {
            return token("VALOR_NULL", null);
          }
          // fall through
          case 42:
            break;
          case 21: {
            return token("VALOR_BOOL", true);
          }
          // fall through
          case 43:
            break;
          case 22: {
            return token("VALOR_BOOL", false);
          }
          // fall through
          case 44:
            break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

}
